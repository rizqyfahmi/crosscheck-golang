// Code generated by MockGen. DO NOT EDIT.
// Source: app/features/authentication/data/source/persistent/auth_persistent.go

// Package mock is a generated GoMock package.
package mock

import (
	model "crosscheck-golang/app/features/authentication/data/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthPersistent is a mock of AuthPersistent interface.
type MockAuthPersistent struct {
	ctrl     *gomock.Controller
	recorder *MockAuthPersistentMockRecorder
}

// MockAuthPersistentMockRecorder is the mock recorder for MockAuthPersistent.
type MockAuthPersistentMockRecorder struct {
	mock *MockAuthPersistent
}

// NewMockAuthPersistent creates a new mock instance.
func NewMockAuthPersistent(ctrl *gomock.Controller) *MockAuthPersistent {
	mock := &MockAuthPersistent{ctrl: ctrl}
	mock.recorder = &MockAuthPersistentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthPersistent) EXPECT() *MockAuthPersistentMockRecorder {
	return m.recorder
}

// GetByUsername mocks base method.
func (m *MockAuthPersistent) GetByUsername(username *string) (*model.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", username)
	ret0, _ := ret[0].(*model.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockAuthPersistentMockRecorder) GetByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockAuthPersistent)(nil).GetByUsername), username)
}

// Insert mocks base method.
func (m *MockAuthPersistent) Insert(userModel *model.UserModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", userModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockAuthPersistentMockRecorder) Insert(userModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAuthPersistent)(nil).Insert), userModel)
}
