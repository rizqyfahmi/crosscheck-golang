// Code generated by MockGen. DO NOT EDIT.
// Source: app/features/authentication/domain/repository/auth_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	exception "crosscheck-golang/app/exception"
	param "crosscheck-golang/app/features/authentication/data/param"
	entity "crosscheck-golang/app/features/authentication/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// Registration mocks base method.
func (m *MockAuthRepository) Registration(param param.RegistrationParam) (*entity.UserEntity, *exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", param)
	ret0, _ := ret[0].(*entity.UserEntity)
	ret1, _ := ret[1].(*exception.Exception)
	return ret0, ret1
}

// Registration indicates an expected call of Registration.
func (mr *MockAuthRepositoryMockRecorder) Registration(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockAuthRepository)(nil).Registration), param)
}
