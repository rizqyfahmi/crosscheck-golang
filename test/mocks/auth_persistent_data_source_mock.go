// Code generated by MockGen. DO NOT EDIT.
// Source: app/features/authentication/data/source/auth_persistent_data_source.go

// Package mock is a generated GoMock package.
package mock

import (
	model "crosscheck-golang/app/features/authentication/data/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthPersistentDataSource is a mock of AuthPersistentDataSource interface.
type MockAuthPersistentDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockAuthPersistentDataSourceMockRecorder
}

// MockAuthPersistentDataSourceMockRecorder is the mock recorder for MockAuthPersistentDataSource.
type MockAuthPersistentDataSourceMockRecorder struct {
	mock *MockAuthPersistentDataSource
}

// NewMockAuthPersistentDataSource creates a new mock instance.
func NewMockAuthPersistentDataSource(ctrl *gomock.Controller) *MockAuthPersistentDataSource {
	mock := &MockAuthPersistentDataSource{ctrl: ctrl}
	mock.recorder = &MockAuthPersistentDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthPersistentDataSource) EXPECT() *MockAuthPersistentDataSourceMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockAuthPersistentDataSource) Insert(userModel *model.UserModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", userModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockAuthPersistentDataSourceMockRecorder) Insert(userModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAuthPersistentDataSource)(nil).Insert), userModel)
}
