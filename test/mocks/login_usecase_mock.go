// Code generated by MockGen. DO NOT EDIT.
// Source: app/features/authentication/domain/usecase/login/login_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	exception "crosscheck-golang/app/exception"
	param "crosscheck-golang/app/features/authentication/data/param"
	entity "crosscheck-golang/app/features/authentication/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLoginUsecase is a mock of LoginUsecase interface.
type MockLoginUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLoginUsecaseMockRecorder
}

// MockLoginUsecaseMockRecorder is the mock recorder for MockLoginUsecase.
type MockLoginUsecaseMockRecorder struct {
	mock *MockLoginUsecase
}

// NewMockLoginUsecase creates a new mock instance.
func NewMockLoginUsecase(ctrl *gomock.Controller) *MockLoginUsecase {
	mock := &MockLoginUsecase{ctrl: ctrl}
	mock.recorder = &MockLoginUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginUsecase) EXPECT() *MockLoginUsecaseMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockLoginUsecase) Call(param param.LoginParam) (*entity.AuthEntity, *exception.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", param)
	ret0, _ := ret[0].(*entity.AuthEntity)
	ret1, _ := ret[1].(*exception.Exception)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockLoginUsecaseMockRecorder) Call(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockLoginUsecase)(nil).Call), param)
}
